package services

import (
	"encoding/json"
	"payslip-generator/pkg/models"
	"payslip-generator/pkg/utils" // For logger

	"github.com/google/uuid"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

// AuditService provides methods for creating audit log entries.
type AuditService struct {
	DB *gorm.DB
}

// NewAuditService creates a new instance of AuditService.
func NewAuditService(db *gorm.DB) *AuditService {
	return &AuditService{DB: db}
}

// AuditLogEntryParams parameters for creating an audit log, simplifying controller logic
type AuditLogEntryParams struct {
	UserID           uuid.UUID
	UserType         string
	Action           string
	TargetResource   string
	TargetResourceID uuid.UUID
	Changes          interface{} // Can be any struct or map to be marshaled to JSON
	IPAddress        string
	RequestID        string
	PerformedBy      uuid.UUID // The user who performed the action (can be same as UserID or a system/admin ID)
}

// CreateAuditLog creates and saves a new audit log entry.
// It takes parameters directly, and the actual models.AuditLog is constructed inside.
func (s *AuditService) CreateAuditLog(params AuditLogEntryParams) error {
	var changesJSON json.RawMessage
	var err error

	if params.Changes != nil {
		changesBytes, err := json.Marshal(params.Changes)
		if err != nil {
			utils.Logger.Error("Failed to marshal audit log changes to JSON",
				zap.Error(err),
				zap.String("action", params.Action),
				zap.String("request_id", params.RequestID),
			)
			// Decide if you want to proceed without changes or return error
			// For now, proceed without changes if marshaling fails
		}
		changesJSON = changesBytes
	}

	auditEntry := models.AuditLog{
		// ID and Timestamp are auto-generated by DB or GORM hooks
		UserID:           params.UserID,    // User being affected or related, can be Nil
		UserType:         params.UserType,  // Type of UserID (e.g. employee, admin)
		Action:           params.Action,
		TargetResource:   params.TargetResource,
		TargetResourceID: params.TargetResourceID, // Can be Nil if not applicable
		Changes:          changesJSON,
		IPAddress:        params.IPAddress,
		RequestID:        params.RequestID,
		// PerformedBy: params.PerformedBy, // Add this field to models.AuditLog if needed to distinguish actor from affected user
	}
	// If AuditLog model itself has CreatedBy for who created the audit log entry:
	// auditEntry.CreatedBy = params.PerformedBy

	if err = s.DB.Create(&auditEntry).Error; err != nil {
		utils.Logger.Error("Failed to create audit log entry in database",
			zap.Error(err),
			zap.String("action", params.Action),
			zap.String("request_id", params.RequestID),
		)
		return err // Return the DB error
	}

	return nil
}
